
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000001cc  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000001cc  00000260  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000007  0080006a  0080006a  0000026a  2**0
                  ALLOC
  3 .debug_aranges 00000020  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000005e  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000116  00000000  00000000  000002e8  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000009d  00000000  00000000  000003fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000133  00000000  00000000  0000049b  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000040  00000000  00000000  000005d0  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000000c9  00000000  00000000  00000610  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 70 00 	jmp	0xe0	; 0xe0 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ec       	ldi	r30, 0xCC	; 204
  68:	f1 e0       	ldi	r31, 0x01	; 1
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a1 37       	cpi	r26, 0x71	; 113
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 55 00 	call	0xaa	; 0xaa <main>
  8a:	0c 94 e4 00 	jmp	0x1c8	; 0x1c8 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_timer0>:
/****************************************************************/
// inicjalizacja timera 0 i ustawienie na 180 Hz (do multipleksowania)
/****************************************************************/
void init_timer0(void)
{
    TCCR0 |= (1 << WGM01); // tryb CTC
  92:	83 b7       	in	r24, 0x33	; 51
  94:	88 60       	ori	r24, 0x08	; 8
  96:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS02) | (1 << CS00); // preskaler 1024
  98:	83 b7       	in	r24, 0x33	; 51
  9a:	85 60       	ori	r24, 0x05	; 5
  9c:	83 bf       	out	0x33, r24	; 51
	OCR0 = 20;
  9e:	84 e1       	ldi	r24, 0x14	; 20
  a0:	8c bf       	out	0x3c, r24	; 60
    TIMSK |= (1 << OCIE0); // zezwolenie na przerwanie timera 0
  a2:	89 b7       	in	r24, 0x39	; 57
  a4:	82 60       	ori	r24, 0x02	; 2
  a6:	89 bf       	out	0x39, r24	; 57
}
  a8:	08 95       	ret

000000aa <main>:
int main(void)
{
	// inicjalizacja

	// PB[0-5] jako wyjscia - do wyboru wyswietlacza
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) | (1 << PB4) | (1 << PB5);
  aa:	87 b3       	in	r24, 0x17	; 23
  ac:	8f 63       	ori	r24, 0x3F	; 63
  ae:	87 bb       	out	0x17, r24	; 23
	
	// PC[0-6] jako wyjscia - sterowanie wyswietlaczem 7-segmentowym
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4) | (1 << PC5) | (1 << PC6);
  b0:	84 b3       	in	r24, 0x14	; 20
  b2:	8f 67       	ori	r24, 0x7F	; 127
  b4:	84 bb       	out	0x14, r24	; 20

	buffer[0] = -1;
  b6:	8f ef       	ldi	r24, 0xFF	; 255
  b8:	80 93 6b 00 	sts	0x006B, r24
	buffer[1] = 10;
  bc:	8a e0       	ldi	r24, 0x0A	; 10
  be:	80 93 6c 00 	sts	0x006C, r24
	buffer[2] = 7;
  c2:	87 e0       	ldi	r24, 0x07	; 7
  c4:	80 93 6d 00 	sts	0x006D, r24
	buffer[3] = 7;
  c8:	80 93 6e 00 	sts	0x006E, r24
	buffer[4] = 1;
  cc:	81 e0       	ldi	r24, 0x01	; 1
  ce:	80 93 6f 00 	sts	0x006F, r24
	buffer[5] = 6;
  d2:	86 e0       	ldi	r24, 0x06	; 6
  d4:	80 93 70 00 	sts	0x0070, r24

	init_timer0();
  d8:	0e 94 49 00 	call	0x92	; 0x92 <init_timer0>

	sei();
  dc:	78 94       	sei
  de:	ff cf       	rjmp	.-2      	; 0xde <main+0x34>

000000e0 <__vector_10>:

/****************************************************************/
// obsluga przerwania timer0
/****************************************************************/
ISR(TIMER0_COMP_vect)
{
  e0:	1f 92       	push	r1
  e2:	0f 92       	push	r0
  e4:	0f b6       	in	r0, 0x3f	; 63
  e6:	0f 92       	push	r0
  e8:	11 24       	eor	r1, r1
  ea:	2f 93       	push	r18
  ec:	5f 93       	push	r21
  ee:	6f 93       	push	r22
  f0:	7f 93       	push	r23
  f2:	8f 93       	push	r24
  f4:	9f 93       	push	r25
  f6:	af 93       	push	r26
  f8:	bf 93       	push	r27
  fa:	ef 93       	push	r30
  fc:	ff 93       	push	r31
	SELECT_DISPLAY(cursor);	  // aktywacja wyswietlacza
  fe:	20 91 6a 00 	lds	r18, 0x006A
 102:	81 e0       	ldi	r24, 0x01	; 1
 104:	90 e0       	ldi	r25, 0x00	; 0
 106:	02 c0       	rjmp	.+4      	; 0x10c <__vector_10+0x2c>
 108:	88 0f       	add	r24, r24
 10a:	99 1f       	adc	r25, r25
 10c:	2a 95       	dec	r18
 10e:	e2 f7       	brpl	.-8      	; 0x108 <__vector_10+0x28>
 110:	88 bb       	out	0x18, r24	; 24
	SET_DIGIT(buffer[cursor]); // ustawienie liczby na wyswietlaczu
 112:	e0 91 6a 00 	lds	r30, 0x006A
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e5 59       	subi	r30, 0x95	; 149
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	e0 81       	ld	r30, Z
 11e:	e0 91 6a 00 	lds	r30, 0x006A
 122:	f0 e0       	ldi	r31, 0x00	; 0
 124:	e5 59       	subi	r30, 0x95	; 149
 126:	ff 4f       	sbci	r31, 0xFF	; 255
 128:	80 81       	ld	r24, Z
 12a:	8a 30       	cpi	r24, 0x0A	; 10
 12c:	10 f0       	brcs	.+4      	; 0x132 <__vector_10+0x52>
 12e:	e0 e0       	ldi	r30, 0x00	; 0
 130:	0a c0       	rjmp	.+20     	; 0x146 <__vector_10+0x66>
 132:	e0 91 6a 00 	lds	r30, 0x006A
 136:	f0 e0       	ldi	r31, 0x00	; 0
 138:	e5 59       	subi	r30, 0x95	; 149
 13a:	ff 4f       	sbci	r31, 0xFF	; 255
 13c:	e0 81       	ld	r30, Z
 13e:	f0 e0       	ldi	r31, 0x00	; 0
 140:	e0 5a       	subi	r30, 0xA0	; 160
 142:	ff 4f       	sbci	r31, 0xFF	; 255
 144:	e0 81       	ld	r30, Z
 146:	e5 bb       	out	0x15, r30	; 21
	CURSOR_NEXT;
 148:	80 91 6a 00 	lds	r24, 0x006A
 14c:	90 e0       	ldi	r25, 0x00	; 0
 14e:	01 96       	adiw	r24, 0x01	; 1
 150:	66 e0       	ldi	r22, 0x06	; 6
 152:	70 e0       	ldi	r23, 0x00	; 0
 154:	0e 94 bd 00 	call	0x17a	; 0x17a <__divmodhi4>
 158:	80 93 6a 00 	sts	0x006A, r24
}
 15c:	ff 91       	pop	r31
 15e:	ef 91       	pop	r30
 160:	bf 91       	pop	r27
 162:	af 91       	pop	r26
 164:	9f 91       	pop	r25
 166:	8f 91       	pop	r24
 168:	7f 91       	pop	r23
 16a:	6f 91       	pop	r22
 16c:	5f 91       	pop	r21
 16e:	2f 91       	pop	r18
 170:	0f 90       	pop	r0
 172:	0f be       	out	0x3f, r0	; 63
 174:	0f 90       	pop	r0
 176:	1f 90       	pop	r1
 178:	18 95       	reti

0000017a <__divmodhi4>:
 17a:	97 fb       	bst	r25, 7
 17c:	09 2e       	mov	r0, r25
 17e:	07 26       	eor	r0, r23
 180:	0a d0       	rcall	.+20     	; 0x196 <__divmodhi4_neg1>
 182:	77 fd       	sbrc	r23, 7
 184:	04 d0       	rcall	.+8      	; 0x18e <__divmodhi4_neg2>
 186:	0c d0       	rcall	.+24     	; 0x1a0 <__udivmodhi4>
 188:	06 d0       	rcall	.+12     	; 0x196 <__divmodhi4_neg1>
 18a:	00 20       	and	r0, r0
 18c:	1a f4       	brpl	.+6      	; 0x194 <__divmodhi4_exit>

0000018e <__divmodhi4_neg2>:
 18e:	70 95       	com	r23
 190:	61 95       	neg	r22
 192:	7f 4f       	sbci	r23, 0xFF	; 255

00000194 <__divmodhi4_exit>:
 194:	08 95       	ret

00000196 <__divmodhi4_neg1>:
 196:	f6 f7       	brtc	.-4      	; 0x194 <__divmodhi4_exit>
 198:	90 95       	com	r25
 19a:	81 95       	neg	r24
 19c:	9f 4f       	sbci	r25, 0xFF	; 255
 19e:	08 95       	ret

000001a0 <__udivmodhi4>:
 1a0:	aa 1b       	sub	r26, r26
 1a2:	bb 1b       	sub	r27, r27
 1a4:	51 e1       	ldi	r21, 0x11	; 17
 1a6:	07 c0       	rjmp	.+14     	; 0x1b6 <__udivmodhi4_ep>

000001a8 <__udivmodhi4_loop>:
 1a8:	aa 1f       	adc	r26, r26
 1aa:	bb 1f       	adc	r27, r27
 1ac:	a6 17       	cp	r26, r22
 1ae:	b7 07       	cpc	r27, r23
 1b0:	10 f0       	brcs	.+4      	; 0x1b6 <__udivmodhi4_ep>
 1b2:	a6 1b       	sub	r26, r22
 1b4:	b7 0b       	sbc	r27, r23

000001b6 <__udivmodhi4_ep>:
 1b6:	88 1f       	adc	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	5a 95       	dec	r21
 1bc:	a9 f7       	brne	.-22     	; 0x1a8 <__udivmodhi4_loop>
 1be:	80 95       	com	r24
 1c0:	90 95       	com	r25
 1c2:	bc 01       	movw	r22, r24
 1c4:	cd 01       	movw	r24, r26
 1c6:	08 95       	ret

000001c8 <_exit>:
 1c8:	f8 94       	cli

000001ca <__stop_program>:
 1ca:	ff cf       	rjmp	.-2      	; 0x1ca <__stop_program>
