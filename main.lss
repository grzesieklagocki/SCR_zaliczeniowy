
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000039a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  0000039a  0000042e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006a  0080006a  00000438  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000438  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000014c  00000000  00000000  00000498  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00000377  00000000  00000000  000005e4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001dd  00000000  00000000  0000095b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000039f  00000000  00000000  00000b38  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000110  00000000  00000000  00000ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000175  00000000  00000000  00000fe8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 77 00 	jmp	0xee	; 0xee <__vector_1>
   8:	0c 94 53 00 	jmp	0xa6	; 0xa6 <__vector_2>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 4f 01 	jmp	0x29e	; 0x29e <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 be 00 	jmp	0x17c	; 0x17c <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ea e9       	ldi	r30, 0x9A	; 154
  68:	f3 e0       	ldi	r31, 0x03	; 3
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 9b 00 	call	0x136	; 0x136 <main>
  8a:	0c 94 cb 01 	jmp	0x396	; 0x396 <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <init_buttons>:
/****************************************************************/
// inicjalizacja obslugi przyciskow na przerwaniach
/****************************************************************/
void init_buttons(void)
{
	PORTD |= (1 << PD2) | (1 << PD3); // wlaczenie rezystora pull-up dla wejsc z przyciskami
  92:	82 b3       	in	r24, 0x12	; 18
  94:	8c 60       	ori	r24, 0x0C	; 12
  96:	82 bb       	out	0x12, r24	; 18
	MCUCR |= (1 << ISC01) | (1 << ISC11); // zbocze opadajace dla INT0 i INT1
  98:	85 b7       	in	r24, 0x35	; 53
  9a:	8a 60       	ori	r24, 0x0A	; 10
  9c:	85 bf       	out	0x35, r24	; 53
	GICR |= (1 << INT0) | (1 << INT1); // wlaczenie przerwan dla INT0 i INT1
  9e:	8b b7       	in	r24, 0x3b	; 59
  a0:	80 6c       	ori	r24, 0xC0	; 192
  a2:	8b bf       	out	0x3b, r24	; 59
}
  a4:	08 95       	ret

000000a6 <__vector_2>:

/****************************************************************/
// obsluga nacisniecia przycisku SET
/****************************************************************/
ISR(INT1_vect)
{
  a6:	1f 92       	push	r1
  a8:	0f 92       	push	r0
  aa:	0f b6       	in	r0, 0x3f	; 63
  ac:	0f 92       	push	r0
  ae:	11 24       	eor	r1, r1
  b0:	2f 93       	push	r18
  b2:	3f 93       	push	r19
  b4:	4f 93       	push	r20
  b6:	5f 93       	push	r21
  b8:	6f 93       	push	r22
  ba:	7f 93       	push	r23
  bc:	8f 93       	push	r24
  be:	9f 93       	push	r25
  c0:	af 93       	push	r26
  c2:	bf 93       	push	r27
  c4:	ef 93       	push	r30
  c6:	ff 93       	push	r31
	add_minute();
  c8:	0e 94 14 01 	call	0x228	; 0x228 <add_minute>
  cc:	ff 91       	pop	r31
  ce:	ef 91       	pop	r30
  d0:	bf 91       	pop	r27
  d2:	af 91       	pop	r26
  d4:	9f 91       	pop	r25
  d6:	8f 91       	pop	r24
  d8:	7f 91       	pop	r23
  da:	6f 91       	pop	r22
  dc:	5f 91       	pop	r21
  de:	4f 91       	pop	r20
  e0:	3f 91       	pop	r19
  e2:	2f 91       	pop	r18
  e4:	0f 90       	pop	r0
  e6:	0f be       	out	0x3f, r0	; 63
  e8:	0f 90       	pop	r0
  ea:	1f 90       	pop	r1
  ec:	18 95       	reti

000000ee <__vector_1>:

/****************************************************************/
// obsluga nacisniecia przycisku SELECT
/****************************************************************/
ISR(INT0_vect) 
{
  ee:	1f 92       	push	r1
  f0:	0f 92       	push	r0
  f2:	0f b6       	in	r0, 0x3f	; 63
  f4:	0f 92       	push	r0
  f6:	11 24       	eor	r1, r1
  f8:	2f 93       	push	r18
  fa:	3f 93       	push	r19
  fc:	4f 93       	push	r20
  fe:	5f 93       	push	r21
 100:	6f 93       	push	r22
 102:	7f 93       	push	r23
 104:	8f 93       	push	r24
 106:	9f 93       	push	r25
 108:	af 93       	push	r26
 10a:	bf 93       	push	r27
 10c:	ef 93       	push	r30
 10e:	ff 93       	push	r31
	add_hour();
 110:	0e 94 36 01 	call	0x26c	; 0x26c <add_hour>
}
 114:	ff 91       	pop	r31
 116:	ef 91       	pop	r30
 118:	bf 91       	pop	r27
 11a:	af 91       	pop	r26
 11c:	9f 91       	pop	r25
 11e:	8f 91       	pop	r24
 120:	7f 91       	pop	r23
 122:	6f 91       	pop	r22
 124:	5f 91       	pop	r21
 126:	4f 91       	pop	r20
 128:	3f 91       	pop	r19
 12a:	2f 91       	pop	r18
 12c:	0f 90       	pop	r0
 12e:	0f be       	out	0x3f, r0	; 63
 130:	0f 90       	pop	r0
 132:	1f 90       	pop	r1
 134:	18 95       	reti

00000136 <main>:
// funkcja glowna programu
/****************************************************************/
int main(void)
{
	// inicjalizacja
	init_led7seg(); // inicjalizacja wyswietlaczy
 136:	0e 94 ac 00 	call	0x158	; 0x158 <init_led7seg>
	init_clock(); // inicjalizacja zegarka
 13a:	0e 94 41 01 	call	0x282	; 0x282 <init_clock>
	init_buttons(); // inicjalizacja przyciskow
 13e:	0e 94 49 00 	call	0x92	; 0x92 <init_buttons>

	clock_set_seconds(57); // ustawienie sekund
 142:	89 e3       	ldi	r24, 0x39	; 57
 144:	0e 94 0b 01 	call	0x216	; 0x216 <clock_set_seconds>
	clock_set_minutes(59); // ustawienie minut
 148:	8b e3       	ldi	r24, 0x3B	; 59
 14a:	0e 94 0e 01 	call	0x21c	; 0x21c <clock_set_minutes>
	clock_set_hours(23); // ustawienie godziny
 14e:	87 e1       	ldi	r24, 0x17	; 23
 150:	0e 94 11 01 	call	0x222	; 0x222 <clock_set_hours>

	sei(); // zezwolenie globalne na przerwania
 154:	78 94       	sei
 156:	ff cf       	rjmp	.-2      	; 0x156 <main+0x20>

00000158 <init_led7seg>:
// inicjalizacja wyswietlaczy
/****************************************************************/
void init_led7seg(void)
{
	// PB[0-5] jako wyjscia - do wyboru wyswietlacza
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) | (1 << PB4) | (1 << PB5);
 158:	87 b3       	in	r24, 0x17	; 23
 15a:	8f 63       	ori	r24, 0x3F	; 63
 15c:	87 bb       	out	0x17, r24	; 23
	
	// PC[0-6] jako wyjscia - sterowanie wyswietlaczem 7-segmentowym
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4) | (1 << PC5) | (1 << PC6);
 15e:	84 b3       	in	r24, 0x14	; 20
 160:	8f 67       	ori	r24, 0x7F	; 127
 162:	84 bb       	out	0x14, r24	; 20

    // inicjalizacja timera 0 i ustawienie na 180 Hz (do multipleksowania)
    TCCR0 |= (1 << WGM01); // tryb CTC
 164:	83 b7       	in	r24, 0x33	; 51
 166:	88 60       	ori	r24, 0x08	; 8
 168:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS02) | (1 << CS00); // preskaler 1024
 16a:	83 b7       	in	r24, 0x33	; 51
 16c:	85 60       	ori	r24, 0x05	; 5
 16e:	83 bf       	out	0x33, r24	; 51
	OCR0 = 171; // (1 / czestotliwosc) / (1 / (F_CPU / preskaler))) - 1
 170:	8b ea       	ldi	r24, 0xAB	; 171
 172:	8c bf       	out	0x3c, r24	; 60
    TIMSK |= (1 << OCIE0); // zezwolenie na przerwanie timera 0
 174:	89 b7       	in	r24, 0x39	; 57
 176:	82 60       	ori	r24, 0x02	; 2
 178:	89 bf       	out	0x39, r24	; 57
}
 17a:	08 95       	ret

0000017c <__vector_10>:

/****************************************************************/
// obsluga przerwania timer0 (do multipleksowania)
/****************************************************************/
ISR(TIMER0_COMP_vect)
{
 17c:	1f 92       	push	r1
 17e:	0f 92       	push	r0
 180:	0f b6       	in	r0, 0x3f	; 63
 182:	0f 92       	push	r0
 184:	11 24       	eor	r1, r1
 186:	2f 93       	push	r18
 188:	5f 93       	push	r21
 18a:	6f 93       	push	r22
 18c:	7f 93       	push	r23
 18e:	8f 93       	push	r24
 190:	9f 93       	push	r25
 192:	af 93       	push	r26
 194:	bf 93       	push	r27
 196:	ef 93       	push	r30
 198:	ff 93       	push	r31
	SELECT_DISPLAY(cursor);	  // aktywacja wyswietlacza
 19a:	20 91 6a 00 	lds	r18, 0x006A
 19e:	81 e0       	ldi	r24, 0x01	; 1
 1a0:	90 e0       	ldi	r25, 0x00	; 0
 1a2:	02 c0       	rjmp	.+4      	; 0x1a8 <__vector_10+0x2c>
 1a4:	88 0f       	add	r24, r24
 1a6:	99 1f       	adc	r25, r25
 1a8:	2a 95       	dec	r18
 1aa:	e2 f7       	brpl	.-8      	; 0x1a4 <__vector_10+0x28>
 1ac:	88 bb       	out	0x18, r24	; 24
	SET_DIGIT(buffer[cursor]); // ustawienie liczby na wyswietlaczu
 1ae:	e0 91 6a 00 	lds	r30, 0x006A
 1b2:	f0 e0       	ldi	r31, 0x00	; 0
 1b4:	e5 59       	subi	r30, 0x95	; 149
 1b6:	ff 4f       	sbci	r31, 0xFF	; 255
 1b8:	e0 81       	ld	r30, Z
 1ba:	e0 91 6a 00 	lds	r30, 0x006A
 1be:	f0 e0       	ldi	r31, 0x00	; 0
 1c0:	e5 59       	subi	r30, 0x95	; 149
 1c2:	ff 4f       	sbci	r31, 0xFF	; 255
 1c4:	80 81       	ld	r24, Z
 1c6:	8a 30       	cpi	r24, 0x0A	; 10
 1c8:	10 f0       	brcs	.+4      	; 0x1ce <__vector_10+0x52>
 1ca:	e0 e0       	ldi	r30, 0x00	; 0
 1cc:	0a c0       	rjmp	.+20     	; 0x1e2 <__vector_10+0x66>
 1ce:	e0 91 6a 00 	lds	r30, 0x006A
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	e5 59       	subi	r30, 0x95	; 149
 1d6:	ff 4f       	sbci	r31, 0xFF	; 255
 1d8:	e0 81       	ld	r30, Z
 1da:	f0 e0       	ldi	r31, 0x00	; 0
 1dc:	e0 5a       	subi	r30, 0xA0	; 160
 1de:	ff 4f       	sbci	r31, 0xFF	; 255
 1e0:	e0 81       	ld	r30, Z
 1e2:	e5 bb       	out	0x15, r30	; 21
	CURSOR_NEXT; // przejscie do nastepnego wyswietlacza
 1e4:	80 91 6a 00 	lds	r24, 0x006A
 1e8:	90 e0       	ldi	r25, 0x00	; 0
 1ea:	01 96       	adiw	r24, 0x01	; 1
 1ec:	66 e0       	ldi	r22, 0x06	; 6
 1ee:	70 e0       	ldi	r23, 0x00	; 0
 1f0:	0e 94 a4 01 	call	0x348	; 0x348 <__divmodhi4>
 1f4:	80 93 6a 00 	sts	0x006A, r24
 1f8:	ff 91       	pop	r31
 1fa:	ef 91       	pop	r30
 1fc:	bf 91       	pop	r27
 1fe:	af 91       	pop	r26
 200:	9f 91       	pop	r25
 202:	8f 91       	pop	r24
 204:	7f 91       	pop	r23
 206:	6f 91       	pop	r22
 208:	5f 91       	pop	r21
 20a:	2f 91       	pop	r18
 20c:	0f 90       	pop	r0
 20e:	0f be       	out	0x3f, r0	; 63
 210:	0f 90       	pop	r0
 212:	1f 90       	pop	r1
 214:	18 95       	reti

00000216 <clock_set_seconds>:
/****************************************************************/
// funkcja ustawiajaca sekundy
/****************************************************************/
void clock_set_seconds(uint8_t seconds)
{
    current_time.seconds = seconds;
 216:	80 93 71 00 	sts	0x0071, r24
}
 21a:	08 95       	ret

0000021c <clock_set_minutes>:
/****************************************************************/
// funkcja ustawiajaca minuty
/****************************************************************/
void clock_set_minutes(uint8_t minutes)
{
    current_time.minutes = minutes;
 21c:	80 93 72 00 	sts	0x0072, r24
}
 220:	08 95       	ret

00000222 <clock_set_hours>:
/****************************************************************/
// funkcja ustawiajaca godzine
/****************************************************************/
void clock_set_hours(uint8_t hours)
{
    current_time.hours = hours;
 222:	80 93 73 00 	sts	0x0073, r24
}
 226:	08 95       	ret

00000228 <add_minute>:
/****************************************************************/
// funkcja zwiekszajaca czas o 1m
/****************************************************************/
void add_minute(void)
{
	if (current_time.minutes < 59)
 228:	80 91 72 00 	lds	r24, 0x0072
 22c:	8b 33       	cpi	r24, 0x3B	; 59
 22e:	20 f4       	brcc	.+8      	; 0x238 <add_minute+0x10>
		current_time.minutes++;
 230:	8f 5f       	subi	r24, 0xFF	; 255
 232:	80 93 72 00 	sts	0x0072, r24
 236:	08 95       	ret
	else
	{
		current_time.minutes = 0;
 238:	10 92 72 00 	sts	0x0072, r1
/****************************************************************/
// funkcja zwiekszajaca czas o 1h
/****************************************************************/
void add_hour(void)
{
	if (current_time.hours < 23)
 23c:	80 91 73 00 	lds	r24, 0x0073
 240:	87 31       	cpi	r24, 0x17	; 23
 242:	20 f4       	brcc	.+8      	; 0x24c <add_minute+0x24>
		current_time.hours++;
 244:	8f 5f       	subi	r24, 0xFF	; 255
 246:	80 93 73 00 	sts	0x0073, r24
 24a:	08 95       	ret
	else
		current_time.hours = 0;
 24c:	10 92 73 00 	sts	0x0073, r1
 250:	08 95       	ret

00000252 <add_second>:
/****************************************************************/
// funkcja zwiekszajaca czas o 1s
/****************************************************************/
void add_second(void)
{
	if (current_time.seconds < 59)
 252:	80 91 71 00 	lds	r24, 0x0071
 256:	8b 33       	cpi	r24, 0x3B	; 59
 258:	20 f4       	brcc	.+8      	; 0x262 <add_second+0x10>
		current_time.seconds++;
 25a:	8f 5f       	subi	r24, 0xFF	; 255
 25c:	80 93 71 00 	sts	0x0071, r24
 260:	08 95       	ret
	else
	{
		current_time.seconds = 0;
 262:	10 92 71 00 	sts	0x0071, r1
		add_minute();
 266:	0e 94 14 01 	call	0x228	; 0x228 <add_minute>
 26a:	08 95       	ret

0000026c <add_hour>:
/****************************************************************/
// funkcja zwiekszajaca czas o 1h
/****************************************************************/
void add_hour(void)
{
	if (current_time.hours < 23)
 26c:	80 91 73 00 	lds	r24, 0x0073
 270:	87 31       	cpi	r24, 0x17	; 23
 272:	20 f4       	brcc	.+8      	; 0x27c <add_hour+0x10>
		current_time.hours++;
 274:	8f 5f       	subi	r24, 0xFF	; 255
 276:	80 93 73 00 	sts	0x0073, r24
 27a:	08 95       	ret
	else
		current_time.hours = 0;
 27c:	10 92 73 00 	sts	0x0073, r1
 280:	08 95       	ret

00000282 <init_clock>:
/****************************************************************/
// inicjalizacja timera 1 i ustawienie na 1 Hz (do odmierzania sekund)
/****************************************************************/
void init_clock(void)
{
	TCCR1B |=  (1 << WGM12); // tryb CTC
 282:	8e b5       	in	r24, 0x2e	; 46
 284:	88 60       	ori	r24, 0x08	; 8
 286:	8e bd       	out	0x2e, r24	; 46
    TCCR1B |= (1 << CS12); // preskaler 256
 288:	8e b5       	in	r24, 0x2e	; 46
 28a:	84 60       	ori	r24, 0x04	; 4
 28c:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 31249; // (1 / czestotliwosc) / (1 / (F_CPU / preskaler))) - 1
 28e:	81 e1       	ldi	r24, 0x11	; 17
 290:	9a e7       	ldi	r25, 0x7A	; 122
 292:	9b bd       	out	0x2b, r25	; 43
 294:	8a bd       	out	0x2a, r24	; 42
    TIMSK |= (1 << OCIE1A); // zezwolenie na przerwanie timera 1 przy przepelnieniu
 296:	89 b7       	in	r24, 0x39	; 57
 298:	80 61       	ori	r24, 0x10	; 16
 29a:	89 bf       	out	0x39, r24	; 57
}
 29c:	08 95       	ret

0000029e <__vector_7>:

/****************************************************************/
// obsluga przerwania timer1 (do odmierzania sekund)
/****************************************************************/
ISR(TIMER1_COMPA_vect)
{
 29e:	1f 92       	push	r1
 2a0:	0f 92       	push	r0
 2a2:	0f b6       	in	r0, 0x3f	; 63
 2a4:	0f 92       	push	r0
 2a6:	11 24       	eor	r1, r1
 2a8:	2f 93       	push	r18
 2aa:	3f 93       	push	r19
 2ac:	4f 93       	push	r20
 2ae:	5f 93       	push	r21
 2b0:	6f 93       	push	r22
 2b2:	7f 93       	push	r23
 2b4:	8f 93       	push	r24
 2b6:	9f 93       	push	r25
 2b8:	af 93       	push	r26
 2ba:	bf 93       	push	r27
 2bc:	ef 93       	push	r30
 2be:	ff 93       	push	r31
	buffer[0] = current_time.hours / 10;
 2c0:	20 91 73 00 	lds	r18, 0x0073
 2c4:	82 2f       	mov	r24, r18
 2c6:	6a e0       	ldi	r22, 0x0A	; 10
 2c8:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodqi4>
 2cc:	80 93 6b 00 	sts	0x006B, r24
	buffer[1] = current_time.hours % 10;
 2d0:	82 2f       	mov	r24, r18
 2d2:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodqi4>
 2d6:	90 93 6c 00 	sts	0x006C, r25
	buffer[2] = current_time.minutes / 10;
 2da:	20 91 72 00 	lds	r18, 0x0072
 2de:	82 2f       	mov	r24, r18
 2e0:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodqi4>
 2e4:	80 93 6d 00 	sts	0x006D, r24
	buffer[3] = current_time.minutes % 10;
 2e8:	82 2f       	mov	r24, r18
 2ea:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodqi4>
 2ee:	90 93 6e 00 	sts	0x006E, r25
	buffer[4] = current_time.seconds / 10;
 2f2:	20 91 71 00 	lds	r18, 0x0071
 2f6:	82 2f       	mov	r24, r18
 2f8:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodqi4>
 2fc:	80 93 6f 00 	sts	0x006F, r24
	buffer[5] = current_time.seconds % 10;
 300:	82 2f       	mov	r24, r18
 302:	0e 94 98 01 	call	0x330	; 0x330 <__udivmodqi4>
 306:	90 93 70 00 	sts	0x0070, r25

	add_second();
 30a:	0e 94 29 01 	call	0x252	; 0x252 <add_second>
 30e:	ff 91       	pop	r31
 310:	ef 91       	pop	r30
 312:	bf 91       	pop	r27
 314:	af 91       	pop	r26
 316:	9f 91       	pop	r25
 318:	8f 91       	pop	r24
 31a:	7f 91       	pop	r23
 31c:	6f 91       	pop	r22
 31e:	5f 91       	pop	r21
 320:	4f 91       	pop	r20
 322:	3f 91       	pop	r19
 324:	2f 91       	pop	r18
 326:	0f 90       	pop	r0
 328:	0f be       	out	0x3f, r0	; 63
 32a:	0f 90       	pop	r0
 32c:	1f 90       	pop	r1
 32e:	18 95       	reti

00000330 <__udivmodqi4>:
 330:	99 1b       	sub	r25, r25
 332:	79 e0       	ldi	r23, 0x09	; 9
 334:	04 c0       	rjmp	.+8      	; 0x33e <__udivmodqi4_ep>

00000336 <__udivmodqi4_loop>:
 336:	99 1f       	adc	r25, r25
 338:	96 17       	cp	r25, r22
 33a:	08 f0       	brcs	.+2      	; 0x33e <__udivmodqi4_ep>
 33c:	96 1b       	sub	r25, r22

0000033e <__udivmodqi4_ep>:
 33e:	88 1f       	adc	r24, r24
 340:	7a 95       	dec	r23
 342:	c9 f7       	brne	.-14     	; 0x336 <__udivmodqi4_loop>
 344:	80 95       	com	r24
 346:	08 95       	ret

00000348 <__divmodhi4>:
 348:	97 fb       	bst	r25, 7
 34a:	09 2e       	mov	r0, r25
 34c:	07 26       	eor	r0, r23
 34e:	0a d0       	rcall	.+20     	; 0x364 <__divmodhi4_neg1>
 350:	77 fd       	sbrc	r23, 7
 352:	04 d0       	rcall	.+8      	; 0x35c <__divmodhi4_neg2>
 354:	0c d0       	rcall	.+24     	; 0x36e <__udivmodhi4>
 356:	06 d0       	rcall	.+12     	; 0x364 <__divmodhi4_neg1>
 358:	00 20       	and	r0, r0
 35a:	1a f4       	brpl	.+6      	; 0x362 <__divmodhi4_exit>

0000035c <__divmodhi4_neg2>:
 35c:	70 95       	com	r23
 35e:	61 95       	neg	r22
 360:	7f 4f       	sbci	r23, 0xFF	; 255

00000362 <__divmodhi4_exit>:
 362:	08 95       	ret

00000364 <__divmodhi4_neg1>:
 364:	f6 f7       	brtc	.-4      	; 0x362 <__divmodhi4_exit>
 366:	90 95       	com	r25
 368:	81 95       	neg	r24
 36a:	9f 4f       	sbci	r25, 0xFF	; 255
 36c:	08 95       	ret

0000036e <__udivmodhi4>:
 36e:	aa 1b       	sub	r26, r26
 370:	bb 1b       	sub	r27, r27
 372:	51 e1       	ldi	r21, 0x11	; 17
 374:	07 c0       	rjmp	.+14     	; 0x384 <__udivmodhi4_ep>

00000376 <__udivmodhi4_loop>:
 376:	aa 1f       	adc	r26, r26
 378:	bb 1f       	adc	r27, r27
 37a:	a6 17       	cp	r26, r22
 37c:	b7 07       	cpc	r27, r23
 37e:	10 f0       	brcs	.+4      	; 0x384 <__udivmodhi4_ep>
 380:	a6 1b       	sub	r26, r22
 382:	b7 0b       	sbc	r27, r23

00000384 <__udivmodhi4_ep>:
 384:	88 1f       	adc	r24, r24
 386:	99 1f       	adc	r25, r25
 388:	5a 95       	dec	r21
 38a:	a9 f7       	brne	.-22     	; 0x376 <__udivmodhi4_loop>
 38c:	80 95       	com	r24
 38e:	90 95       	com	r25
 390:	bc 01       	movw	r22, r24
 392:	cd 01       	movw	r24, r26
 394:	08 95       	ret

00000396 <_exit>:
 396:	f8 94       	cli

00000398 <__stop_program>:
 398:	ff cf       	rjmp	.-2      	; 0x398 <__stop_program>
