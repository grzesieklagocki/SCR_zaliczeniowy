
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000000fc  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000000fc  00000170  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .debug_aranges 00000020  00000000  00000000  0000017a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 0000001b  00000000  00000000  0000019a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   0000016e  00000000  00000000  000001b5  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000000e8  00000000  00000000  00000323  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00000165  00000000  00000000  0000040b  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000020  00000000  00000000  00000570  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    000000ed  00000000  00000000  00000590  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00000028  00000000  00000000  0000067d  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000048  00000000  00000000  000006a5  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec ef       	ldi	r30, 0xFC	; 252
  68:	f0 e0       	ldi	r31, 0x00	; 0
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>
  76:	0e 94 41 00 	call	0x82	; 0x82 <main>
  7a:	0c 94 7c 00 	jmp	0xf8	; 0xf8 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <main>:

#define SELECT_DISPLAY(x)  PORTB = (1 << x);
#define SET_DIGIT(x)       PORTC = (x < 0 ? 0 : segments[x]);

int main(void)
{
  82:	df 93       	push	r29
  84:	cf 93       	push	r28
  86:	00 d0       	rcall	.+0      	; 0x88 <main+0x6>
  88:	00 d0       	rcall	.+0      	; 0x8a <main+0x8>
  8a:	00 d0       	rcall	.+0      	; 0x8c <main+0xa>
  8c:	cd b7       	in	r28, 0x3d	; 61
  8e:	de b7       	in	r29, 0x3e	; 62
	// inicjalizacja

	// PB[0-5] jako wyjscia - do wyboru wyswietlacza
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) | (1 << PB4) | (1 << PB5);
  90:	87 b3       	in	r24, 0x17	; 23
  92:	8f 63       	ori	r24, 0x3F	; 63
  94:	87 bb       	out	0x17, r24	; 23
	
	// PC[0-6] jako wyjscia - sterowanie wyswietlaczem 7-segmentowym
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4) | (1 << PC5) | (1 << PC6); 
  96:	84 b3       	in	r24, 0x14	; 20
  98:	8f 67       	ori	r24, 0x7F	; 127
  9a:	84 bb       	out	0x14, r24	; 20
		(1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | 			 (1 << PC5) | (1 << PC6)  // 9
	};

	uint8_t buffer[6];

	buffer[0] = 4;
  9c:	84 e0       	ldi	r24, 0x04	; 4
  9e:	89 83       	std	Y+1, r24	; 0x01
	buffer[1] = 4;
  a0:	8a 83       	std	Y+2, r24	; 0x02
	buffer[2] = 2;
  a2:	92 e0       	ldi	r25, 0x02	; 2
  a4:	9b 83       	std	Y+3, r25	; 0x03
	buffer[3] = 6;
  a6:	86 e0       	ldi	r24, 0x06	; 6
  a8:	8c 83       	std	Y+4, r24	; 0x04
	buffer[4] = 2;
  aa:	9d 83       	std	Y+5, r25	; 0x05
	buffer[5] = 0;
  ac:	1e 82       	std	Y+6, r1	; 0x06
  ae:	20 e0       	ldi	r18, 0x00	; 0
  b0:	30 e0       	ldi	r19, 0x00	; 0
	while(1)
	{
		// multipleksowanie 6 wyswietlaczy
		for(int i = 0; i < 6; i++)
		{
			SELECT_DISPLAY(i); // aktywacja wyswietlacza
  b2:	a1 e0       	ldi	r26, 0x01	; 1
  b4:	b0 e0       	ldi	r27, 0x00	; 0
			SET_DIGIT(buffer[i]); // ustawienie liczby na wyswietlaczu 
  b6:	be 01       	movw	r22, r28
  b8:	6f 5f       	subi	r22, 0xFF	; 255
  ba:	7f 4f       	sbci	r23, 0xFF	; 255
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
  bc:	40 e1       	ldi	r20, 0x10	; 16
  be:	57 e2       	ldi	r21, 0x27	; 39
	while(1)
	{
		// multipleksowanie 6 wyswietlaczy
		for(int i = 0; i < 6; i++)
		{
			SELECT_DISPLAY(i); // aktywacja wyswietlacza
  c0:	cd 01       	movw	r24, r26
  c2:	02 2e       	mov	r0, r18
  c4:	02 c0       	rjmp	.+4      	; 0xca <main+0x48>
  c6:	88 0f       	add	r24, r24
  c8:	99 1f       	adc	r25, r25
  ca:	0a 94       	dec	r0
  cc:	e2 f7       	brpl	.-8      	; 0xc6 <main+0x44>
  ce:	88 bb       	out	0x18, r24	; 24
			SET_DIGIT(buffer[i]); // ustawienie liczby na wyswietlaczu 
  d0:	fb 01       	movw	r30, r22
  d2:	e2 0f       	add	r30, r18
  d4:	f3 1f       	adc	r31, r19
  d6:	e0 81       	ld	r30, Z
  d8:	f0 e0       	ldi	r31, 0x00	; 0
  da:	e0 5a       	subi	r30, 0xA0	; 160
  dc:	ff 4f       	sbci	r31, 0xFF	; 255
  de:	80 81       	ld	r24, Z
  e0:	85 bb       	out	0x15, r24	; 21
  e2:	ca 01       	movw	r24, r20
  e4:	01 97       	sbiw	r24, 0x01	; 1
  e6:	f1 f7       	brne	.-4      	; 0xe4 <main+0x62>


	while(1)
	{
		// multipleksowanie 6 wyswietlaczy
		for(int i = 0; i < 6; i++)
  e8:	2f 5f       	subi	r18, 0xFF	; 255
  ea:	3f 4f       	sbci	r19, 0xFF	; 255
  ec:	26 30       	cpi	r18, 0x06	; 6
  ee:	31 05       	cpc	r19, r1
  f0:	3c f3       	brlt	.-50     	; 0xc0 <main+0x3e>
  f2:	20 e0       	ldi	r18, 0x00	; 0
  f4:	30 e0       	ldi	r19, 0x00	; 0
  f6:	e4 cf       	rjmp	.-56     	; 0xc0 <main+0x3e>

000000f8 <_exit>:
  f8:	f8 94       	cli

000000fa <__stop_program>:
  fa:	ff cf       	rjmp	.-2      	; 0xfa <__stop_program>
