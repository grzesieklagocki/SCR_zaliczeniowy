
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002e0  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002e0  00000374  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006a  0080006a  0000037e  2**0
                  ALLOC
  3 .debug_aranges 00000040  00000000  00000000  0000037e  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000000cc  00000000  00000000  000003be  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000026b  00000000  00000000  0000048a  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 0000018f  00000000  00000000  000006f5  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000002c3  00000000  00000000  00000884  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000a0  00000000  00000000  00000b48  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000141  00000000  00000000  00000be8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 84 00 	jmp	0x108	; 0x108 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 ee 00 	jmp	0x1dc	; 0x1dc <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e0 ee       	ldi	r30, 0xE0	; 224
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 cd 00 	call	0x19a	; 0x19a <main>
  8a:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <add_minute>:
/****************************************************************/
// funkcja zwiekszajaca czas o 1m
/****************************************************************/
void add_minute(void)
{
	if (current_time.minutes < 59)
  92:	80 91 6c 00 	lds	r24, 0x006C
  96:	8b 33       	cpi	r24, 0x3B	; 59
  98:	20 f4       	brcc	.+8      	; 0xa2 <add_minute+0x10>
		current_time.minutes++;
  9a:	8f 5f       	subi	r24, 0xFF	; 255
  9c:	80 93 6c 00 	sts	0x006C, r24
  a0:	08 95       	ret
	else
	{
		current_time.minutes = 0;
  a2:	10 92 6c 00 	sts	0x006C, r1
/****************************************************************/
// funkcja zwiekszajaca czas o 1h
/****************************************************************/
void add_hour(void)
{
	if (current_time.hours < 23)
  a6:	80 91 6d 00 	lds	r24, 0x006D
  aa:	87 31       	cpi	r24, 0x17	; 23
  ac:	20 f4       	brcc	.+8      	; 0xb6 <add_minute+0x24>
		current_time.hours++;
  ae:	8f 5f       	subi	r24, 0xFF	; 255
  b0:	80 93 6d 00 	sts	0x006D, r24
  b4:	08 95       	ret
	else
		current_time.hours = 0;
  b6:	10 92 6d 00 	sts	0x006D, r1
  ba:	08 95       	ret

000000bc <add_second>:
/****************************************************************/
// funkcja zwiekszajaca czas o 1s
/****************************************************************/
void add_second(void)
{
	if (current_time.seconds < 59)
  bc:	80 91 6b 00 	lds	r24, 0x006B
  c0:	8b 33       	cpi	r24, 0x3B	; 59
  c2:	20 f4       	brcc	.+8      	; 0xcc <add_second+0x10>
		current_time.seconds++;
  c4:	8f 5f       	subi	r24, 0xFF	; 255
  c6:	80 93 6b 00 	sts	0x006B, r24
  ca:	08 95       	ret
	else
	{
		current_time.seconds = 0;
  cc:	10 92 6b 00 	sts	0x006B, r1
		add_minute();
  d0:	0e 94 49 00 	call	0x92	; 0x92 <add_minute>
  d4:	08 95       	ret

000000d6 <add_hour>:
/****************************************************************/
// funkcja zwiekszajaca czas o 1h
/****************************************************************/
void add_hour(void)
{
	if (current_time.hours < 23)
  d6:	80 91 6d 00 	lds	r24, 0x006D
  da:	87 31       	cpi	r24, 0x17	; 23
  dc:	20 f4       	brcc	.+8      	; 0xe6 <add_hour+0x10>
		current_time.hours++;
  de:	8f 5f       	subi	r24, 0xFF	; 255
  e0:	80 93 6d 00 	sts	0x006D, r24
  e4:	08 95       	ret
	else
		current_time.hours = 0;
  e6:	10 92 6d 00 	sts	0x006D, r1
  ea:	08 95       	ret

000000ec <init_timer1>:
/****************************************************************/
// inicjalizacja timera 1 i ustawienie na 1 Hz (do odmierzania sekund)
/****************************************************************/
void init_timer1(void)
{
	TCCR1B |=  (1 << WGM12); // tryb CTC
  ec:	8e b5       	in	r24, 0x2e	; 46
  ee:	88 60       	ori	r24, 0x08	; 8
  f0:	8e bd       	out	0x2e, r24	; 46
    TCCR1B |= (1 << CS12); // preskaler 256
  f2:	8e b5       	in	r24, 0x2e	; 46
  f4:	84 60       	ori	r24, 0x04	; 4
  f6:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 31249; // (1 / czestotliwosc) / (1 / (F_CPU / preskaler))) - 1
  f8:	81 e1       	ldi	r24, 0x11	; 17
  fa:	9a e7       	ldi	r25, 0x7A	; 122
  fc:	9b bd       	out	0x2b, r25	; 43
  fe:	8a bd       	out	0x2a, r24	; 42
    TIMSK |= (1 << OCIE1A); // zezwolenie na przerwanie timera 1 przy przepelnieniu
 100:	89 b7       	in	r24, 0x39	; 57
 102:	80 61       	ori	r24, 0x10	; 16
 104:	89 bf       	out	0x39, r24	; 57
}
 106:	08 95       	ret

00000108 <__vector_7>:

/****************************************************************/
// obsluga przerwania timer1 (do odmierzania sekund)
/****************************************************************/
ISR(TIMER1_COMPA_vect)
{
 108:	1f 92       	push	r1
 10a:	0f 92       	push	r0
 10c:	0f b6       	in	r0, 0x3f	; 63
 10e:	0f 92       	push	r0
 110:	11 24       	eor	r1, r1
 112:	2f 93       	push	r18
 114:	3f 93       	push	r19
 116:	4f 93       	push	r20
 118:	5f 93       	push	r21
 11a:	6f 93       	push	r22
 11c:	7f 93       	push	r23
 11e:	8f 93       	push	r24
 120:	9f 93       	push	r25
 122:	af 93       	push	r26
 124:	bf 93       	push	r27
 126:	ef 93       	push	r30
 128:	ff 93       	push	r31
	buffer[0] = current_time.hours / 10;
 12a:	20 91 6d 00 	lds	r18, 0x006D
 12e:	82 2f       	mov	r24, r18
 130:	6a e0       	ldi	r22, 0x0A	; 10
 132:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodqi4>
 136:	80 93 6e 00 	sts	0x006E, r24
	buffer[1] = current_time.hours % 10;
 13a:	82 2f       	mov	r24, r18
 13c:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodqi4>
 140:	90 93 6f 00 	sts	0x006F, r25
	buffer[2] = current_time.minutes / 10;
 144:	20 91 6c 00 	lds	r18, 0x006C
 148:	82 2f       	mov	r24, r18
 14a:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodqi4>
 14e:	80 93 70 00 	sts	0x0070, r24
	buffer[3] = current_time.minutes % 10;
 152:	82 2f       	mov	r24, r18
 154:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodqi4>
 158:	90 93 71 00 	sts	0x0071, r25
	buffer[4] = current_time.seconds / 10;
 15c:	20 91 6b 00 	lds	r18, 0x006B
 160:	82 2f       	mov	r24, r18
 162:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodqi4>
 166:	80 93 72 00 	sts	0x0072, r24
	buffer[5] = current_time.seconds % 10;
 16a:	82 2f       	mov	r24, r18
 16c:	0e 94 3b 01 	call	0x276	; 0x276 <__udivmodqi4>
 170:	90 93 73 00 	sts	0x0073, r25

	add_second();
 174:	0e 94 5e 00 	call	0xbc	; 0xbc <add_second>
}
 178:	ff 91       	pop	r31
 17a:	ef 91       	pop	r30
 17c:	bf 91       	pop	r27
 17e:	af 91       	pop	r26
 180:	9f 91       	pop	r25
 182:	8f 91       	pop	r24
 184:	7f 91       	pop	r23
 186:	6f 91       	pop	r22
 188:	5f 91       	pop	r21
 18a:	4f 91       	pop	r20
 18c:	3f 91       	pop	r19
 18e:	2f 91       	pop	r18
 190:	0f 90       	pop	r0
 192:	0f be       	out	0x3f, r0	; 63
 194:	0f 90       	pop	r0
 196:	1f 90       	pop	r1
 198:	18 95       	reti

0000019a <main>:
int main(void)
{
	// inicjalizacja

	// PB[0-5] jako wyjscia - do wyboru wyswietlacza
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) | (1 << PB4) | (1 << PB5);
 19a:	87 b3       	in	r24, 0x17	; 23
 19c:	8f 63       	ori	r24, 0x3F	; 63
 19e:	87 bb       	out	0x17, r24	; 23
	
	// PC[0-6] jako wyjscia - sterowanie wyswietlaczem 7-segmentowym
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4) | (1 << PC5) | (1 << PC6);
 1a0:	84 b3       	in	r24, 0x14	; 20
 1a2:	8f 67       	ori	r24, 0x7F	; 127
 1a4:	84 bb       	out	0x14, r24	; 20

	current_time.seconds = 57;
 1a6:	89 e3       	ldi	r24, 0x39	; 57
 1a8:	80 93 6b 00 	sts	0x006B, r24
	current_time.minutes = 59;
 1ac:	8b e3       	ldi	r24, 0x3B	; 59
 1ae:	80 93 6c 00 	sts	0x006C, r24
	current_time.hours = 23;
 1b2:	87 e1       	ldi	r24, 0x17	; 23
 1b4:	80 93 6d 00 	sts	0x006D, r24

	init_led7seg();
 1b8:	0e 94 e2 00 	call	0x1c4	; 0x1c4 <init_led7seg>
	init_timer1();
 1bc:	0e 94 76 00 	call	0xec	; 0xec <init_timer1>

	sei(); // zezwolenie globalne na przerwania
 1c0:	78 94       	sei
 1c2:	ff cf       	rjmp	.-2      	; 0x1c2 <main+0x28>

000001c4 <init_led7seg>:
/****************************************************************/
// inicjalizacja timera 0 i ustawienie na 180 Hz (do multipleksowania)
/****************************************************************/
void init_led7seg(void)
{
    TCCR0 |= (1 << WGM01); // tryb CTC
 1c4:	83 b7       	in	r24, 0x33	; 51
 1c6:	88 60       	ori	r24, 0x08	; 8
 1c8:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS02) | (1 << CS00); // preskaler 1024
 1ca:	83 b7       	in	r24, 0x33	; 51
 1cc:	85 60       	ori	r24, 0x05	; 5
 1ce:	83 bf       	out	0x33, r24	; 51
	OCR0 = 171; // (1 / czestotliwosc) / (1 / (F_CPU / preskaler))) - 1
 1d0:	8b ea       	ldi	r24, 0xAB	; 171
 1d2:	8c bf       	out	0x3c, r24	; 60
    TIMSK |= (1 << OCIE0); // zezwolenie na przerwanie timera 0
 1d4:	89 b7       	in	r24, 0x39	; 57
 1d6:	82 60       	ori	r24, 0x02	; 2
 1d8:	89 bf       	out	0x39, r24	; 57
}
 1da:	08 95       	ret

000001dc <__vector_10>:

/****************************************************************/
// obsluga przerwania timer0 (do multipleksowania)
/****************************************************************/
ISR(TIMER0_COMP_vect)
{
 1dc:	1f 92       	push	r1
 1de:	0f 92       	push	r0
 1e0:	0f b6       	in	r0, 0x3f	; 63
 1e2:	0f 92       	push	r0
 1e4:	11 24       	eor	r1, r1
 1e6:	2f 93       	push	r18
 1e8:	5f 93       	push	r21
 1ea:	6f 93       	push	r22
 1ec:	7f 93       	push	r23
 1ee:	8f 93       	push	r24
 1f0:	9f 93       	push	r25
 1f2:	af 93       	push	r26
 1f4:	bf 93       	push	r27
 1f6:	ef 93       	push	r30
 1f8:	ff 93       	push	r31
	SELECT_DISPLAY(cursor);	  // aktywacja wyswietlacza
 1fa:	20 91 6a 00 	lds	r18, 0x006A
 1fe:	81 e0       	ldi	r24, 0x01	; 1
 200:	90 e0       	ldi	r25, 0x00	; 0
 202:	02 c0       	rjmp	.+4      	; 0x208 <__vector_10+0x2c>
 204:	88 0f       	add	r24, r24
 206:	99 1f       	adc	r25, r25
 208:	2a 95       	dec	r18
 20a:	e2 f7       	brpl	.-8      	; 0x204 <__vector_10+0x28>
 20c:	88 bb       	out	0x18, r24	; 24
	SET_DIGIT(buffer[cursor]); // ustawienie liczby na wyswietlaczu
 20e:	e0 91 6a 00 	lds	r30, 0x006A
 212:	f0 e0       	ldi	r31, 0x00	; 0
 214:	e2 59       	subi	r30, 0x92	; 146
 216:	ff 4f       	sbci	r31, 0xFF	; 255
 218:	e0 81       	ld	r30, Z
 21a:	e0 91 6a 00 	lds	r30, 0x006A
 21e:	f0 e0       	ldi	r31, 0x00	; 0
 220:	e2 59       	subi	r30, 0x92	; 146
 222:	ff 4f       	sbci	r31, 0xFF	; 255
 224:	80 81       	ld	r24, Z
 226:	8a 30       	cpi	r24, 0x0A	; 10
 228:	10 f0       	brcs	.+4      	; 0x22e <__vector_10+0x52>
 22a:	e0 e0       	ldi	r30, 0x00	; 0
 22c:	0a c0       	rjmp	.+20     	; 0x242 <__vector_10+0x66>
 22e:	e0 91 6a 00 	lds	r30, 0x006A
 232:	f0 e0       	ldi	r31, 0x00	; 0
 234:	e2 59       	subi	r30, 0x92	; 146
 236:	ff 4f       	sbci	r31, 0xFF	; 255
 238:	e0 81       	ld	r30, Z
 23a:	f0 e0       	ldi	r31, 0x00	; 0
 23c:	e0 5a       	subi	r30, 0xA0	; 160
 23e:	ff 4f       	sbci	r31, 0xFF	; 255
 240:	e0 81       	ld	r30, Z
 242:	e5 bb       	out	0x15, r30	; 21
	CURSOR_NEXT; // przejscie do nastepnego wyswietlacza
 244:	80 91 6a 00 	lds	r24, 0x006A
 248:	90 e0       	ldi	r25, 0x00	; 0
 24a:	01 96       	adiw	r24, 0x01	; 1
 24c:	66 e0       	ldi	r22, 0x06	; 6
 24e:	70 e0       	ldi	r23, 0x00	; 0
 250:	0e 94 47 01 	call	0x28e	; 0x28e <__divmodhi4>
 254:	80 93 6a 00 	sts	0x006A, r24
 258:	ff 91       	pop	r31
 25a:	ef 91       	pop	r30
 25c:	bf 91       	pop	r27
 25e:	af 91       	pop	r26
 260:	9f 91       	pop	r25
 262:	8f 91       	pop	r24
 264:	7f 91       	pop	r23
 266:	6f 91       	pop	r22
 268:	5f 91       	pop	r21
 26a:	2f 91       	pop	r18
 26c:	0f 90       	pop	r0
 26e:	0f be       	out	0x3f, r0	; 63
 270:	0f 90       	pop	r0
 272:	1f 90       	pop	r1
 274:	18 95       	reti

00000276 <__udivmodqi4>:
 276:	99 1b       	sub	r25, r25
 278:	79 e0       	ldi	r23, 0x09	; 9
 27a:	04 c0       	rjmp	.+8      	; 0x284 <__udivmodqi4_ep>

0000027c <__udivmodqi4_loop>:
 27c:	99 1f       	adc	r25, r25
 27e:	96 17       	cp	r25, r22
 280:	08 f0       	brcs	.+2      	; 0x284 <__udivmodqi4_ep>
 282:	96 1b       	sub	r25, r22

00000284 <__udivmodqi4_ep>:
 284:	88 1f       	adc	r24, r24
 286:	7a 95       	dec	r23
 288:	c9 f7       	brne	.-14     	; 0x27c <__udivmodqi4_loop>
 28a:	80 95       	com	r24
 28c:	08 95       	ret

0000028e <__divmodhi4>:
 28e:	97 fb       	bst	r25, 7
 290:	09 2e       	mov	r0, r25
 292:	07 26       	eor	r0, r23
 294:	0a d0       	rcall	.+20     	; 0x2aa <__divmodhi4_neg1>
 296:	77 fd       	sbrc	r23, 7
 298:	04 d0       	rcall	.+8      	; 0x2a2 <__divmodhi4_neg2>
 29a:	0c d0       	rcall	.+24     	; 0x2b4 <__udivmodhi4>
 29c:	06 d0       	rcall	.+12     	; 0x2aa <__divmodhi4_neg1>
 29e:	00 20       	and	r0, r0
 2a0:	1a f4       	brpl	.+6      	; 0x2a8 <__divmodhi4_exit>

000002a2 <__divmodhi4_neg2>:
 2a2:	70 95       	com	r23
 2a4:	61 95       	neg	r22
 2a6:	7f 4f       	sbci	r23, 0xFF	; 255

000002a8 <__divmodhi4_exit>:
 2a8:	08 95       	ret

000002aa <__divmodhi4_neg1>:
 2aa:	f6 f7       	brtc	.-4      	; 0x2a8 <__divmodhi4_exit>
 2ac:	90 95       	com	r25
 2ae:	81 95       	neg	r24
 2b0:	9f 4f       	sbci	r25, 0xFF	; 255
 2b2:	08 95       	ret

000002b4 <__udivmodhi4>:
 2b4:	aa 1b       	sub	r26, r26
 2b6:	bb 1b       	sub	r27, r27
 2b8:	51 e1       	ldi	r21, 0x11	; 17
 2ba:	07 c0       	rjmp	.+14     	; 0x2ca <__udivmodhi4_ep>

000002bc <__udivmodhi4_loop>:
 2bc:	aa 1f       	adc	r26, r26
 2be:	bb 1f       	adc	r27, r27
 2c0:	a6 17       	cp	r26, r22
 2c2:	b7 07       	cpc	r27, r23
 2c4:	10 f0       	brcs	.+4      	; 0x2ca <__udivmodhi4_ep>
 2c6:	a6 1b       	sub	r26, r22
 2c8:	b7 0b       	sbc	r27, r23

000002ca <__udivmodhi4_ep>:
 2ca:	88 1f       	adc	r24, r24
 2cc:	99 1f       	adc	r25, r25
 2ce:	5a 95       	dec	r21
 2d0:	a9 f7       	brne	.-22     	; 0x2bc <__udivmodhi4_loop>
 2d2:	80 95       	com	r24
 2d4:	90 95       	com	r25
 2d6:	bc 01       	movw	r22, r24
 2d8:	cd 01       	movw	r24, r26
 2da:	08 95       	ret

000002dc <_exit>:
 2dc:	f8 94       	cli

000002de <__stop_program>:
 2de:	ff cf       	rjmp	.-2      	; 0x2de <__stop_program>
