
main.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000002f2  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000000a  00800060  000002f2  00000386  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          0000000a  0080006a  0080006a  00000390  2**0
                  ALLOC
  3 .debug_aranges 00000060  00000000  00000000  00000390  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 0000011d  00000000  00000000  000003f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000033b  00000000  00000000  0000050d  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000001c8  00000000  00000000  00000848  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000033d  00000000  00000000  00000a10  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000000e0  00000000  00000000  00000d50  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000152  00000000  00000000  00000e30  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
   c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  1c:	0c 94 fb 00 	jmp	0x1f6	; 0x1f6 <__vector_7>
  20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  28:	0c 94 6a 00 	jmp	0xd4	; 0xd4 <__vector_10>
  2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
  50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	e2 ef       	ldi	r30, 0xF2	; 242
  68:	f2 e0       	ldi	r31, 0x02	; 2
  6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
  70:	aa 36       	cpi	r26, 0x6A	; 106
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
  76:	10 e0       	ldi	r17, 0x00	; 0
  78:	aa e6       	ldi	r26, 0x6A	; 106
  7a:	b0 e0       	ldi	r27, 0x00	; 0
  7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
  7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
  80:	a4 37       	cpi	r26, 0x74	; 116
  82:	b1 07       	cpc	r27, r17
  84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
  86:	0e 94 49 00 	call	0x92	; 0x92 <main>
  8a:	0c 94 77 01 	jmp	0x2ee	; 0x2ee <_exit>

0000008e <__bad_interrupt>:
  8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <main>:
// funkcja glowna programu
/****************************************************************/
int main(void)
{
	// inicjalizacja
	init_led7seg(); // inicjalizacja wyswietlaczy
  92:	0e 94 58 00 	call	0xb0	; 0xb0 <init_led7seg>
	init_clock(); // inicjalizacja zegarka
  96:	0e 94 ed 00 	call	0x1da	; 0x1da <init_clock>

	clock_set_seconds(57); // ustawienie sekund
  9a:	89 e3       	ldi	r24, 0x39	; 57
  9c:	0e 94 b7 00 	call	0x16e	; 0x16e <clock_set_seconds>
	clock_set_minutes(59); // ustawienie minut
  a0:	8b e3       	ldi	r24, 0x3B	; 59
  a2:	0e 94 ba 00 	call	0x174	; 0x174 <clock_set_minutes>
	clock_set_hours(23); // ustawienie godziny
  a6:	87 e1       	ldi	r24, 0x17	; 23
  a8:	0e 94 bd 00 	call	0x17a	; 0x17a <clock_set_hours>

	sei(); // zezwolenie globalne na przerwania
  ac:	78 94       	sei
  ae:	ff cf       	rjmp	.-2      	; 0xae <main+0x1c>

000000b0 <init_led7seg>:
// 
/****************************************************************/
void init_led7seg(void)
{
	// PB[0-5] jako wyjscia - do wyboru wyswietlacza
	DDRB |= (1 << PB0) | (1 << PB1) | (1 << PB2) | (1 << PB3) | (1 << PB4) | (1 << PB5);
  b0:	87 b3       	in	r24, 0x17	; 23
  b2:	8f 63       	ori	r24, 0x3F	; 63
  b4:	87 bb       	out	0x17, r24	; 23
	
	// PC[0-6] jako wyjscia - sterowanie wyswietlaczem 7-segmentowym
	DDRC |= (1 << PC0) | (1 << PC1) | (1 << PC2) | (1 << PC3) | (1 << PC4) | (1 << PC5) | (1 << PC6);
  b6:	84 b3       	in	r24, 0x14	; 20
  b8:	8f 67       	ori	r24, 0x7F	; 127
  ba:	84 bb       	out	0x14, r24	; 20

    // inicjalizacja timera 0 i ustawienie na 180 Hz (do multipleksowania)
    TCCR0 |= (1 << WGM01); // tryb CTC
  bc:	83 b7       	in	r24, 0x33	; 51
  be:	88 60       	ori	r24, 0x08	; 8
  c0:	83 bf       	out	0x33, r24	; 51
    TCCR0 |= (1 << CS02) | (1 << CS00); // preskaler 1024
  c2:	83 b7       	in	r24, 0x33	; 51
  c4:	85 60       	ori	r24, 0x05	; 5
  c6:	83 bf       	out	0x33, r24	; 51
	OCR0 = 171; // (1 / czestotliwosc) / (1 / (F_CPU / preskaler))) - 1
  c8:	8b ea       	ldi	r24, 0xAB	; 171
  ca:	8c bf       	out	0x3c, r24	; 60
    TIMSK |= (1 << OCIE0); // zezwolenie na przerwanie timera 0
  cc:	89 b7       	in	r24, 0x39	; 57
  ce:	82 60       	ori	r24, 0x02	; 2
  d0:	89 bf       	out	0x39, r24	; 57
}
  d2:	08 95       	ret

000000d4 <__vector_10>:

/****************************************************************/
// obsluga przerwania timer0 (do multipleksowania)
/****************************************************************/
ISR(TIMER0_COMP_vect)
{
  d4:	1f 92       	push	r1
  d6:	0f 92       	push	r0
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	0f 92       	push	r0
  dc:	11 24       	eor	r1, r1
  de:	2f 93       	push	r18
  e0:	5f 93       	push	r21
  e2:	6f 93       	push	r22
  e4:	7f 93       	push	r23
  e6:	8f 93       	push	r24
  e8:	9f 93       	push	r25
  ea:	af 93       	push	r26
  ec:	bf 93       	push	r27
  ee:	ef 93       	push	r30
  f0:	ff 93       	push	r31
	SELECT_DISPLAY(cursor);	  // aktywacja wyswietlacza
  f2:	20 91 6a 00 	lds	r18, 0x006A
  f6:	81 e0       	ldi	r24, 0x01	; 1
  f8:	90 e0       	ldi	r25, 0x00	; 0
  fa:	02 c0       	rjmp	.+4      	; 0x100 <__vector_10+0x2c>
  fc:	88 0f       	add	r24, r24
  fe:	99 1f       	adc	r25, r25
 100:	2a 95       	dec	r18
 102:	e2 f7       	brpl	.-8      	; 0xfc <__vector_10+0x28>
 104:	88 bb       	out	0x18, r24	; 24
	SET_DIGIT(buffer[cursor]); // ustawienie liczby na wyswietlaczu
 106:	e0 91 6a 00 	lds	r30, 0x006A
 10a:	f0 e0       	ldi	r31, 0x00	; 0
 10c:	e5 59       	subi	r30, 0x95	; 149
 10e:	ff 4f       	sbci	r31, 0xFF	; 255
 110:	e0 81       	ld	r30, Z
 112:	e0 91 6a 00 	lds	r30, 0x006A
 116:	f0 e0       	ldi	r31, 0x00	; 0
 118:	e5 59       	subi	r30, 0x95	; 149
 11a:	ff 4f       	sbci	r31, 0xFF	; 255
 11c:	80 81       	ld	r24, Z
 11e:	8a 30       	cpi	r24, 0x0A	; 10
 120:	10 f0       	brcs	.+4      	; 0x126 <__vector_10+0x52>
 122:	e0 e0       	ldi	r30, 0x00	; 0
 124:	0a c0       	rjmp	.+20     	; 0x13a <__vector_10+0x66>
 126:	e0 91 6a 00 	lds	r30, 0x006A
 12a:	f0 e0       	ldi	r31, 0x00	; 0
 12c:	e5 59       	subi	r30, 0x95	; 149
 12e:	ff 4f       	sbci	r31, 0xFF	; 255
 130:	e0 81       	ld	r30, Z
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	e0 5a       	subi	r30, 0xA0	; 160
 136:	ff 4f       	sbci	r31, 0xFF	; 255
 138:	e0 81       	ld	r30, Z
 13a:	e5 bb       	out	0x15, r30	; 21
	CURSOR_NEXT; // przejscie do nastepnego wyswietlacza
 13c:	80 91 6a 00 	lds	r24, 0x006A
 140:	90 e0       	ldi	r25, 0x00	; 0
 142:	01 96       	adiw	r24, 0x01	; 1
 144:	66 e0       	ldi	r22, 0x06	; 6
 146:	70 e0       	ldi	r23, 0x00	; 0
 148:	0e 94 50 01 	call	0x2a0	; 0x2a0 <__divmodhi4>
 14c:	80 93 6a 00 	sts	0x006A, r24
 150:	ff 91       	pop	r31
 152:	ef 91       	pop	r30
 154:	bf 91       	pop	r27
 156:	af 91       	pop	r26
 158:	9f 91       	pop	r25
 15a:	8f 91       	pop	r24
 15c:	7f 91       	pop	r23
 15e:	6f 91       	pop	r22
 160:	5f 91       	pop	r21
 162:	2f 91       	pop	r18
 164:	0f 90       	pop	r0
 166:	0f be       	out	0x3f, r0	; 63
 168:	0f 90       	pop	r0
 16a:	1f 90       	pop	r1
 16c:	18 95       	reti

0000016e <clock_set_seconds>:
/****************************************************************/
// funkcja ustawiajaca sekundy
/****************************************************************/
void clock_set_seconds(uint8_t seconds)
{
    current_time.seconds = seconds;
 16e:	80 93 71 00 	sts	0x0071, r24
}
 172:	08 95       	ret

00000174 <clock_set_minutes>:
/****************************************************************/
// funkcja ustawiajaca minuty
/****************************************************************/
void clock_set_minutes(uint8_t minutes)
{
    current_time.minutes = minutes;
 174:	80 93 72 00 	sts	0x0072, r24
}
 178:	08 95       	ret

0000017a <clock_set_hours>:
/****************************************************************/
// funkcja ustawiajaca godzine
/****************************************************************/
void clock_set_hours(uint8_t hours)
{
    current_time.hours = hours;
 17a:	80 93 73 00 	sts	0x0073, r24
}
 17e:	08 95       	ret

00000180 <add_minute>:
/****************************************************************/
// funkcja zwiekszajaca czas o 1m
/****************************************************************/
void add_minute(void)
{
	if (current_time.minutes < 59)
 180:	80 91 72 00 	lds	r24, 0x0072
 184:	8b 33       	cpi	r24, 0x3B	; 59
 186:	20 f4       	brcc	.+8      	; 0x190 <add_minute+0x10>
		current_time.minutes++;
 188:	8f 5f       	subi	r24, 0xFF	; 255
 18a:	80 93 72 00 	sts	0x0072, r24
 18e:	08 95       	ret
	else
	{
		current_time.minutes = 0;
 190:	10 92 72 00 	sts	0x0072, r1
/****************************************************************/
// funkcja zwiekszajaca czas o 1h
/****************************************************************/
void add_hour(void)
{
	if (current_time.hours < 23)
 194:	80 91 73 00 	lds	r24, 0x0073
 198:	87 31       	cpi	r24, 0x17	; 23
 19a:	20 f4       	brcc	.+8      	; 0x1a4 <add_minute+0x24>
		current_time.hours++;
 19c:	8f 5f       	subi	r24, 0xFF	; 255
 19e:	80 93 73 00 	sts	0x0073, r24
 1a2:	08 95       	ret
	else
		current_time.hours = 0;
 1a4:	10 92 73 00 	sts	0x0073, r1
 1a8:	08 95       	ret

000001aa <add_second>:
/****************************************************************/
// funkcja zwiekszajaca czas o 1s
/****************************************************************/
void add_second(void)
{
	if (current_time.seconds < 59)
 1aa:	80 91 71 00 	lds	r24, 0x0071
 1ae:	8b 33       	cpi	r24, 0x3B	; 59
 1b0:	20 f4       	brcc	.+8      	; 0x1ba <add_second+0x10>
		current_time.seconds++;
 1b2:	8f 5f       	subi	r24, 0xFF	; 255
 1b4:	80 93 71 00 	sts	0x0071, r24
 1b8:	08 95       	ret
	else
	{
		current_time.seconds = 0;
 1ba:	10 92 71 00 	sts	0x0071, r1
		add_minute();
 1be:	0e 94 c0 00 	call	0x180	; 0x180 <add_minute>
 1c2:	08 95       	ret

000001c4 <add_hour>:
/****************************************************************/
// funkcja zwiekszajaca czas o 1h
/****************************************************************/
void add_hour(void)
{
	if (current_time.hours < 23)
 1c4:	80 91 73 00 	lds	r24, 0x0073
 1c8:	87 31       	cpi	r24, 0x17	; 23
 1ca:	20 f4       	brcc	.+8      	; 0x1d4 <add_hour+0x10>
		current_time.hours++;
 1cc:	8f 5f       	subi	r24, 0xFF	; 255
 1ce:	80 93 73 00 	sts	0x0073, r24
 1d2:	08 95       	ret
	else
		current_time.hours = 0;
 1d4:	10 92 73 00 	sts	0x0073, r1
 1d8:	08 95       	ret

000001da <init_clock>:
/****************************************************************/
// inicjalizacja timera 1 i ustawienie na 1 Hz (do odmierzania sekund)
/****************************************************************/
void init_clock(void)
{
	TCCR1B |=  (1 << WGM12); // tryb CTC
 1da:	8e b5       	in	r24, 0x2e	; 46
 1dc:	88 60       	ori	r24, 0x08	; 8
 1de:	8e bd       	out	0x2e, r24	; 46
    TCCR1B |= (1 << CS12); // preskaler 256
 1e0:	8e b5       	in	r24, 0x2e	; 46
 1e2:	84 60       	ori	r24, 0x04	; 4
 1e4:	8e bd       	out	0x2e, r24	; 46
	OCR1A = 31249; // (1 / czestotliwosc) / (1 / (F_CPU / preskaler))) - 1
 1e6:	81 e1       	ldi	r24, 0x11	; 17
 1e8:	9a e7       	ldi	r25, 0x7A	; 122
 1ea:	9b bd       	out	0x2b, r25	; 43
 1ec:	8a bd       	out	0x2a, r24	; 42
    TIMSK |= (1 << OCIE1A); // zezwolenie na przerwanie timera 1 przy przepelnieniu
 1ee:	89 b7       	in	r24, 0x39	; 57
 1f0:	80 61       	ori	r24, 0x10	; 16
 1f2:	89 bf       	out	0x39, r24	; 57
}
 1f4:	08 95       	ret

000001f6 <__vector_7>:

/****************************************************************/
// obsluga przerwania timer1 (do odmierzania sekund)
/****************************************************************/
ISR(TIMER1_COMPA_vect)
{
 1f6:	1f 92       	push	r1
 1f8:	0f 92       	push	r0
 1fa:	0f b6       	in	r0, 0x3f	; 63
 1fc:	0f 92       	push	r0
 1fe:	11 24       	eor	r1, r1
 200:	2f 93       	push	r18
 202:	3f 93       	push	r19
 204:	4f 93       	push	r20
 206:	5f 93       	push	r21
 208:	6f 93       	push	r22
 20a:	7f 93       	push	r23
 20c:	8f 93       	push	r24
 20e:	9f 93       	push	r25
 210:	af 93       	push	r26
 212:	bf 93       	push	r27
 214:	ef 93       	push	r30
 216:	ff 93       	push	r31
	buffer[0] = current_time.hours / 10;
 218:	20 91 73 00 	lds	r18, 0x0073
 21c:	82 2f       	mov	r24, r18
 21e:	6a e0       	ldi	r22, 0x0A	; 10
 220:	0e 94 44 01 	call	0x288	; 0x288 <__udivmodqi4>
 224:	80 93 6b 00 	sts	0x006B, r24
	buffer[1] = current_time.hours % 10;
 228:	82 2f       	mov	r24, r18
 22a:	0e 94 44 01 	call	0x288	; 0x288 <__udivmodqi4>
 22e:	90 93 6c 00 	sts	0x006C, r25
	buffer[2] = current_time.minutes / 10;
 232:	20 91 72 00 	lds	r18, 0x0072
 236:	82 2f       	mov	r24, r18
 238:	0e 94 44 01 	call	0x288	; 0x288 <__udivmodqi4>
 23c:	80 93 6d 00 	sts	0x006D, r24
	buffer[3] = current_time.minutes % 10;
 240:	82 2f       	mov	r24, r18
 242:	0e 94 44 01 	call	0x288	; 0x288 <__udivmodqi4>
 246:	90 93 6e 00 	sts	0x006E, r25
	buffer[4] = current_time.seconds / 10;
 24a:	20 91 71 00 	lds	r18, 0x0071
 24e:	82 2f       	mov	r24, r18
 250:	0e 94 44 01 	call	0x288	; 0x288 <__udivmodqi4>
 254:	80 93 6f 00 	sts	0x006F, r24
	buffer[5] = current_time.seconds % 10;
 258:	82 2f       	mov	r24, r18
 25a:	0e 94 44 01 	call	0x288	; 0x288 <__udivmodqi4>
 25e:	90 93 70 00 	sts	0x0070, r25

	add_second();
 262:	0e 94 d5 00 	call	0x1aa	; 0x1aa <add_second>
 266:	ff 91       	pop	r31
 268:	ef 91       	pop	r30
 26a:	bf 91       	pop	r27
 26c:	af 91       	pop	r26
 26e:	9f 91       	pop	r25
 270:	8f 91       	pop	r24
 272:	7f 91       	pop	r23
 274:	6f 91       	pop	r22
 276:	5f 91       	pop	r21
 278:	4f 91       	pop	r20
 27a:	3f 91       	pop	r19
 27c:	2f 91       	pop	r18
 27e:	0f 90       	pop	r0
 280:	0f be       	out	0x3f, r0	; 63
 282:	0f 90       	pop	r0
 284:	1f 90       	pop	r1
 286:	18 95       	reti

00000288 <__udivmodqi4>:
 288:	99 1b       	sub	r25, r25
 28a:	79 e0       	ldi	r23, 0x09	; 9
 28c:	04 c0       	rjmp	.+8      	; 0x296 <__udivmodqi4_ep>

0000028e <__udivmodqi4_loop>:
 28e:	99 1f       	adc	r25, r25
 290:	96 17       	cp	r25, r22
 292:	08 f0       	brcs	.+2      	; 0x296 <__udivmodqi4_ep>
 294:	96 1b       	sub	r25, r22

00000296 <__udivmodqi4_ep>:
 296:	88 1f       	adc	r24, r24
 298:	7a 95       	dec	r23
 29a:	c9 f7       	brne	.-14     	; 0x28e <__udivmodqi4_loop>
 29c:	80 95       	com	r24
 29e:	08 95       	ret

000002a0 <__divmodhi4>:
 2a0:	97 fb       	bst	r25, 7
 2a2:	09 2e       	mov	r0, r25
 2a4:	07 26       	eor	r0, r23
 2a6:	0a d0       	rcall	.+20     	; 0x2bc <__divmodhi4_neg1>
 2a8:	77 fd       	sbrc	r23, 7
 2aa:	04 d0       	rcall	.+8      	; 0x2b4 <__divmodhi4_neg2>
 2ac:	0c d0       	rcall	.+24     	; 0x2c6 <__udivmodhi4>
 2ae:	06 d0       	rcall	.+12     	; 0x2bc <__divmodhi4_neg1>
 2b0:	00 20       	and	r0, r0
 2b2:	1a f4       	brpl	.+6      	; 0x2ba <__divmodhi4_exit>

000002b4 <__divmodhi4_neg2>:
 2b4:	70 95       	com	r23
 2b6:	61 95       	neg	r22
 2b8:	7f 4f       	sbci	r23, 0xFF	; 255

000002ba <__divmodhi4_exit>:
 2ba:	08 95       	ret

000002bc <__divmodhi4_neg1>:
 2bc:	f6 f7       	brtc	.-4      	; 0x2ba <__divmodhi4_exit>
 2be:	90 95       	com	r25
 2c0:	81 95       	neg	r24
 2c2:	9f 4f       	sbci	r25, 0xFF	; 255
 2c4:	08 95       	ret

000002c6 <__udivmodhi4>:
 2c6:	aa 1b       	sub	r26, r26
 2c8:	bb 1b       	sub	r27, r27
 2ca:	51 e1       	ldi	r21, 0x11	; 17
 2cc:	07 c0       	rjmp	.+14     	; 0x2dc <__udivmodhi4_ep>

000002ce <__udivmodhi4_loop>:
 2ce:	aa 1f       	adc	r26, r26
 2d0:	bb 1f       	adc	r27, r27
 2d2:	a6 17       	cp	r26, r22
 2d4:	b7 07       	cpc	r27, r23
 2d6:	10 f0       	brcs	.+4      	; 0x2dc <__udivmodhi4_ep>
 2d8:	a6 1b       	sub	r26, r22
 2da:	b7 0b       	sbc	r27, r23

000002dc <__udivmodhi4_ep>:
 2dc:	88 1f       	adc	r24, r24
 2de:	99 1f       	adc	r25, r25
 2e0:	5a 95       	dec	r21
 2e2:	a9 f7       	brne	.-22     	; 0x2ce <__udivmodhi4_loop>
 2e4:	80 95       	com	r24
 2e6:	90 95       	com	r25
 2e8:	bc 01       	movw	r22, r24
 2ea:	cd 01       	movw	r24, r26
 2ec:	08 95       	ret

000002ee <_exit>:
 2ee:	f8 94       	cli

000002f0 <__stop_program>:
 2f0:	ff cf       	rjmp	.-2      	; 0x2f0 <__stop_program>
